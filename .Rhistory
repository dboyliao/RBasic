U100 <- sapply(c(1:8), U_by_Age, U_data = U100data, data=data100) * 100
class <- 1:8
par(mfrow = c(1,1),
mai = c(1.1, 0.8, 0.6, 0.8))
plot(c(1, 8) , c(-0.05, 0.2), type = 'n',
xlab = 'Age Class', ylab = 'Unemploy rate',
main = 'Unemploy Rate by Age Class')
lines(class, U99, col = 'blue', lwd = 2.5)
lines(class, U100, col = 'red', lwd = 2.5)
legend(6.8, 0.2, c('2010', '2011'), lty = c(1, 1), lwd = c(1.5, 1.5),
col = c('blue', 'red'))
par(mfrow = c(4,2),
mai = c(0.5, 0.5, 0.3, 0.3))
for (i in 1:4){
ind <- data99[, 'age_label'] == i
hist(data99[ind, 'month_income'], main = paste('Income Distribution of',
toString(2010), 'Age Class',
toString(i)))
abline(v = 17280, col = 'red')
ind <- data100[, 'age_label'] == i
hist(data99[ind, 'month_income'], main = paste('Income Distribution of',
toString(2011), 'Age Class',
toString(i)))
abline(v = 17880, col = 'blue')
}
par(mfrow = c(4,2),
mai = c(0.5, 0.5, 0.3, 0.3))
for (i in 5:8){
ind <- data99[, 'age_label'] == i
hist(data99[ind, 'month_income'], main = paste('Income Distribution of',
toString(2010), 'year', 'Age Class',
toString(i)))
abline(v = 17280, col = 'red')
ind <- data100[, 'age_label'] == i
hist(data99[ind, 'month_income'], main = paste('Income Distribution of',
toString(2011), 'year', 'Age Class',
toString(i)))
abline(v = 17880, col = 'blue')
}
par(mfrow = c(1,1),
mai = c(1.5, 0.8, 0.4, 0.8))
boxplot(month_income ~ age_label, data = data99, main = '2010 Income Boxplot by Age',
xlab = 'Age', ylab = 'Income')
boxplot(month_income ~ age_label, data = data100, main = '2011 Income Boxplot by Age',
xlab = 'Age', ylab = 'Income')
### data with wage lower than min wage
ind <- which(data99[, 'month_income'] < 17280)
data99_low <- na.omit(data99[ind, ])
ind <- which(data100[, 'month_income'] < 17880)
data100_low <- data100[ind, ]
ind99 <- c(which(names(data99_low) == 'main_voc_cat'),
which(names(data99_low) == 'year_ind'))
ind100 <- c(which(names(data100_low) == 'main_voc_cat'),
which(names(data100_low) == 'year_ind'))
data99And100_low_by_vac <- rbind(data99_low[, ind99], data100_low[, ind100])
table_low_by_vac <- table(year_ind = data99And100_low_by_vac[, 2],
main_voc_cat = data99And100_low_by_vac[, 1])
barplot(table_low_by_vac, beside=T, legend=T, col=c('blue', 'red'))
# ### Investigating Data ###
# ## single_level: detecting columns with single level.
# single_level <- function(data){
#         k <- ncol(data)
#         single <- c()
#         for (i in 1:k){
#                 tmp <- as.factor(data[, i])
#                 lev <- length(levels(tmp))
#                 if (lev == 1){
#                         single <- c(single, i)
#                 }
#         }
#         return(single)
# }
#
# # num: detecting non-numeric columns
# num <- function(data){
#         k <- ncol(data)
#         num <- c()
#         for (i in 1:k){
#                 tmp <- data[, i]
#                 test <- is.numeric(tmp)
#                 if (!test){
#                         num <- c(num, i)
#                 }
#         }
#         return(num)
# }
# num_ind99 <- num(data99_low)
# data99_tmp <- data99_low[, -num_ind99]
#
# sing99 <- single_level(data99_tmp)
# data99_tmp <- data99_tmp[, -sing99]
#
# fit.99 <- lm(month_income ~ ., data = data99_tmp)
# summary(fit.99)
# #summary(step(fit.99), k = 2, method = 'backward')
#
# num_ind100 <- num(data100_low)
# data100_tmp <- data100_low[, -num_ind100]
#
# sing100 <- single_level(data100_tmp)
# data100_tmp <- data100_tmp[, -sing100]
#
# fit.100 <- lm(month_income ~ ., data = data100_tmp)
# summary(fit.100)
# # summary(step(fit.100), k = 2, method = 'backward')
#
# barplot(table(data99_tmp[ , c('edu_cat')]))
rm(list=ls())
if (!is.loaded('foreign')) {library('foreign')}
if (!is.loaded('ggplot2')) {library('ggplot2')}
### Set up working dictionary and some useful indices.
wd <- '~/Documents/SRDA_Data'
dic <- 'Worker_HR'
wd <- paste(wd, dic, sep = '/')
cdicname <- '_release2_'
cfilename <- 'mu'
### Read all related data set into a list, data.
### Note that if data is not available, the corresponding position in that list
### is left as NA.
###
### month_income: salary
file <- paste(wd, '/', toString(99), cdicname, toString(33), '/',
cfilename, toString(99), '.dta', sep = '')
data99 <- read.dta(file, convert.factors = F)
year_ind <- rep(toString(99), nrow(data99))
data99 <- cbind(data99, year_ind)
file <- paste(wd, '/', toString(100), cdicname, toString(34), '/',
cfilename, toString(100), '.dta', sep = '')
data100 <- read.dta(file, convert.factors = F)
year_ind <- rep(toString(100), nrow(data100))
data100 <- cbind(data100, year_ind)
## Rename the column names
names(data99)[names(data99)=='a1'] <- "relation"
names(data99)[names(data99)=='a3'] <- "age"
names(data99)[names(data99)=='a5_1'] <- "edu_status"
names(data99)[names(data99)=='a5_2'] <- "edu_level"
names(data99)[names(data99)=='a6'] <- "edu_cat"
names(data99)[names(data99)=='a7'] <- "PubS_retire"
names(data99)[names(data99)=='a8'] <- "work_status_LWeek"
names(data99)[names(data99)=='a21_a2'] <- "main_indust_cat"
names(data99)[names(data99)=='a22_a'] <- "main_voc_cat"
names(data99)[names(data99)=='a22_b'] <- "sec_voc_cat"
names(data99)[names(data99)=='b1'] <- "month_income"
names(data99)[names(data99)=='b2_a'] <- "main_job_status"
names(data99)[names(data99)=='b2_b'] <- "main_job_hours"
names(data99)[names(data99)=='b2_c'] <- "main_job_PT"
names(data99)[names(data99)=='b6_a2'] <- "change_job_cat"
names(data100)[names(data100)=='a1'] <- "relation"
names(data100)[names(data100)=='a3'] <- "age"
names(data100)[names(data100)=='a5_1'] <- "edu_status"
names(data100)[names(data100)=='a5_2'] <- "edu_level"
names(data100)[names(data100)=='a6'] <- "edu_cat"
names(data100)[names(data100)=='a7'] <- "PubS_retire"
names(data100)[names(data100)=='a8'] <- "work_status_LWeek"
names(data100)[names(data100)=='a21_a2'] <- "main_indust_cat"
names(data100)[names(data100)=='a22_a'] <- "main_voc_cat"
names(data100)[names(data100)=='a22_b'] <- "sec_voc_cat"
names(data100)[names(data100)=='b1'] <- "month_income"
names(data100)[names(data100)=='b2_a'] <- "main_job_status"
names(data100)[names(data100)=='b2_b'] <- "main_job_hours"
names(data100)[names(data100)=='b2_c'] <- "main_job_PT"
names(data100)[names(data100)=='b6_a2'] <- "change_job_cat"
# Class 1: < 20
# Class 2: 20 ~ 30
# Class 3: 30 ~ 40
# Class 4: 40 ~ 50
# Class 5: 50 ~ 60
# Class 6: 60 ~ 70
# Class 7: 70 ~ 80
# Class 8: > 80
label_fun <- function(x){
ind <- x %/% 10
return(ind)
}
age_label <- as.numeric(lapply(data99[, 'age'], label_fun))
data99 <- cbind(data99, age_label)
age_label <- as.numeric(lapply(data100[, 'age'], label_fun))
data100 <- cbind(data100, age_label)
## Remove observation with 0 income. (0 stands for not availible)
ind <- 1000 <= data99[, 'month_income'] & data99[, 'month_income'] <= 75000
data99 <- data99[ind, ]
ind <- 1000 <= data100[, 'month_income'] & data100[, 'month_income'] <= 75000
data100 <- data100[ind, ]
U_by_Age <- function(i, U_data, data){
ind <-  U_data[, 'age_label'] == i
U <- sum(ind) / nrow(data)
return(U)
}
## Uemployment
ind <- data99[, 'work_status_LWeek'] >= 4
U99data <- cbind(work_status_LWeek = data99[ind, 'work_status_LWeek'], age_label = data99[ind, 'age_label'])
U99 <- sapply(c(1:8), U_by_Age, U_data = U99data, data=data99) * 100
ind <- data100[, 'work_status_LWeek'] >= 4
U100data <- cbind(work_status_LWeek = data100[ind, 'work_status_LWeek'], age_label = data100[ind, 'age_label'])
U100 <- sapply(c(1:8), U_by_Age, U_data = U100data, data=data100) * 100
class <- 1:8
par(mfrow = c(1,1),
mai = c(1.1, 0.8, 0.6, 0.8))
plot(c(1, 8) , c(-0.05, 0.2), type = 'n',
xlab = 'Age Class', ylab = 'Unemploy rate',
main = 'Unemploy Rate by Age Class')
lines(class, U99, col = 'blue', lwd = 2.5)
lines(class, U100, col = 'red', lwd = 2.5)
legend(6.8, 0.2, c('2010', '2011'), lty = c(1, 1), lwd = c(1.5, 1.5),
col = c('blue', 'red'))
par(mfrow = c(4,2),
mai = c(0.5, 0.5, 0.3, 0.3))
for (i in 1:4){
ind <- data99[, 'age_label'] == i
hist(data99[ind, 'month_income'], main = paste('Income Distribution of',
toString(2010), 'Age Class',
toString(i)))
abline(v = 17280, col = 'red')
ind <- data100[, 'age_label'] == i
hist(data99[ind, 'month_income'], main = paste('Income Distribution of',
toString(2011), 'Age Class',
toString(i)))
abline(v = 17880, col = 'blue')
}
par(mfrow = c(4,2),
mai = c(0.5, 0.5, 0.3, 0.3))
for (i in 5:8){
ind <- data99[, 'age_label'] == i
hist(data99[ind, 'month_income'], main = paste('Income Distribution of',
toString(2010), 'year', 'Age Class',
toString(i)))
abline(v = 17280, col = 'red')
ind <- data100[, 'age_label'] == i
hist(data99[ind, 'month_income'], main = paste('Income Distribution of',
toString(2011), 'year', 'Age Class',
toString(i)))
abline(v = 17880, col = 'blue')
}
par(mfrow = c(1,1),
mai = c(1.5, 0.8, 0.4, 0.8))
boxplot(month_income ~ age_label, data = data99, main = '2010 Income Boxplot by Age',
xlab = 'Age', ylab = 'Income')
boxplot(month_income ~ age_label, data = data100, main = '2011 Income Boxplot by Age',
xlab = 'Age', ylab = 'Income')
### data with wage lower than min wage
ind <- which(data99[, 'month_income'] < 17280)
data99_low <- na.omit(data99[ind, ])
ind <- which(data100[, 'month_income'] < 17880)
data100_low <- data100[ind, ]
ind99 <- c(which(names(data99_low) == 'main_voc_cat'),
which(names(data99_low) == 'year_ind'))
ind100 <- c(which(names(data100_low) == 'main_voc_cat'),
which(names(data100_low) == 'year_ind'))
data99And100_low_by_vac <- rbind(data99_low[, ind99], data100_low[, ind100])
table_low_by_vac <- table(year_ind = data99And100_low_by_vac[, 2],
main_voc_cat = data99And100_low_by_vac[, 1])
barplot(table_low_by_vac, beside=T, legend=T, col=c('blue', 'red'))
# ### Investigating Data ###
# ## single_level: detecting columns with single level.
# single_level <- function(data){
#         k <- ncol(data)
#         single <- c()
#         for (i in 1:k){
#                 tmp <- as.factor(data[, i])
#                 lev <- length(levels(tmp))
#                 if (lev == 1){
#                         single <- c(single, i)
#                 }
#         }
#         return(single)
# }
#
# # num: detecting non-numeric columns
# num <- function(data){
#         k <- ncol(data)
#         num <- c()
#         for (i in 1:k){
#                 tmp <- data[, i]
#                 test <- is.numeric(tmp)
#                 if (!test){
#                         num <- c(num, i)
#                 }
#         }
#         return(num)
# }
# num_ind99 <- num(data99_low)
# data99_tmp <- data99_low[, -num_ind99]
#
# sing99 <- single_level(data99_tmp)
# data99_tmp <- data99_tmp[, -sing99]
#
# fit.99 <- lm(month_income ~ ., data = data99_tmp)
# summary(fit.99)
# #summary(step(fit.99), k = 2, method = 'backward')
#
# num_ind100 <- num(data100_low)
# data100_tmp <- data100_low[, -num_ind100]
#
# sing100 <- single_level(data100_tmp)
# data100_tmp <- data100_tmp[, -sing100]
#
# fit.100 <- lm(month_income ~ ., data = data100_tmp)
# summary(fit.100)
# # summary(step(fit.100), k = 2, method = 'backward')
#
# barplot(table(data99_tmp[ , c('edu_cat')]))
install.packages('bayesm')
?bayesm
library('bayesm')
?bayesm
Sigma=matrix(c(1,.5,.5,1),ncol=2)
L=t(chol(Sigma))
trunpt=c(0,0,1,1)
above=c(1,1)
ghkvec(L,trunpt,above,100)
library('mvtnorm')
?pmvnorm
?pnorm
load("~/Documents/SChang(2011)/data.RData")
rm(list= ls())
load("~/Documents/SChang(2011)/data.RData")
data$tdum2
View(data$tdum2)
View(data$lnS)
Sigma=matrix(c(1,.5,.5,1),ncol=2)
L=t(chol(Sigma))
trunpt=c(0,0,1,1)
above=c(1,1)
ghkvec(L,trunpt,above,100000)
library('bayesm')
Sigma=matrix(c(1,.5,.5,1),ncol=2)
L=t(chol(Sigma))
trunpt=c(0,0,1,1)
above=c(1,1)
ghkvec(L,trunpt,above,100000)
Sigma=matrix(c(1,.5,.5,1),ncol=2)
L=t(chol(Sigma))
trunpt=c(1,1)
above=c(1,1)
ghkvec(L,trunpt,above,100000)
Sigma=matrix(c(1,.5,.5,1),ncol=2)
L=t(chol(Sigma))
trunpt=c(1,1)
above=c(1,1)
ghkvec(L,trunpt,above,100000)
if (!is.loaded('truncnorm')) library('truncnorm')
?truncnorm
install.packages('tmvtnorm')
u <- rtruncnorm(100)
u
u <- rtruncnorm(100, a = 0)
u
load("~/Documents/SChang(2011)/data.RData")
data2 <- as.data.frame(data)
View(data2)
View(data2)
attach(data2)
sum(tdum2)
sum(tdum3)
sum(tdum4)
sum(tdum5)
data <- as.data.frame(data)
rm(data2)
rm(u)
save.image("~/Documents/SChang(2011)/panel.RData")
rm(data)
load("~/Documents/SChang(2011)/panel.RData")
rm(list = ls())
if !(is.loaded('tmvtnorm')) library('tmvtnorm')
if !(is.loaded('tmvtnorm'))library('tmvtnorm')
if (!is.loaded('tmvtnorm')) library('tmvtnorm')
u <- rtruncnorm(100, a = 0)
load("~/Documents/SChang(2011)/panel.RData")
View(data)
data$tdum2
sum(data$tdum2)
sum(data$tdum3)
sum(data$tdum4)
sum(data$tdum5)
sum(data$tdum2)
sum(data$tdum3)
sum(data$tdum4)
sum(data$tdum5)
rm(list = ls())
if (!is.loaded('animation')){library('animation')}
iter = 40000
p = runif(iter)
coord = matrix(c(0, 0), ncol = 1)
df = rbind(data.frame(), t(coord))
dis = c(0.05, 0.81, 0.07)
for (i in 1:iter) {
if (p[i] <= dis[1]) {
m = matrix(c(0, 0, 0, 0.16), nrow = 2, ncol = 2)
const = matrix(c(0, 0), ncol = 1)
} else if (p[i] > dis[1] && p[i] <= dis[1] + dis[2]) {
m = matrix(c(0.85, -0.04, 0.04, 0.85), nrow = 2, ncol = 2)
const = matrix(c(0, 1.6), ncol = 1)
} else if (p[i] > dis[1] + dis[2] && p[i] <= sum(dis)) {
m = matrix(c(0.2, 0.23, -0.26, 0.22), nrow = 2, ncol = 2)
const = matrix(c(0, 1.6), ncol = 1)
} else {
m = matrix(c(-0.15, 0.26, 0.28, 0.24), nrow = 2, ncol = 2)
const = matrix(c(0, 0.44), ncol = 1)
}
coord = m %*% coord + const
df = rbind(df, t(coord))
}
th <- 1
for (i in seq(100, iter, by = 200)){
name <- paste('~/Barnsley/00', toString(th), '.png', sep = '')
png(filename = name, width = 900, height = 566)
plot(x = df[1:i, 2], y = df[1:i, 1], plt = c(0, 10, -5, 5), cex = 0.1, asp = 1)
dev.off()
th <- th + 1
}
th <- 1
for (i in seq(100, iter, by = 200)){
name <- paste('~/Barnsley/', toString(th), '.png', sep = '')
png(filename = name, width = 900, height = 566)
plot(x = df[1:i, 2], y = df[1:i, 1], plt = c(0, 10, -5, 5), cex = 0.1, asp = 1)
dev.off()
th <- th + 1
}
th <- 1
for (i in seq(100, iter, by = 200)){
name <- paste('~/Barnsley/', toString(th), '.png', sep = '')
png(filename = name, width = 900, height = 566)
plot(x = df[1:i, 2], y = df[1:i, 1], plt = c(0, 10, -5, 5), cex = 0.1, asp = 1)
dev.off()
th <- th + 1
}
th <- 1
for (i in seq(100, iter, by = 200)){
name <- paste('~/Barnsley/', toString(th), '.png', sep = '')
png(filename = name, width = 900, height = 566)
plot(x = df[1:i, 2], y = df[1:i, 1], plt = c(0, 10, -5, 5), cex = 0.1, asp = 1)
dev.off()
th <- th + 1
}
th <- 1
for (i in seq(1000, iter, by = 1000)){
name <- paste('~/Barnsley/', toString(th), '.png', sep = '')
png(filename = name, width = 900, height = 566)
plot(x = df[1:i, 2], y = df[1:i, 1], plt = c(0, 10, -5, 5), cex = 0.1, asp = 1)
dev.off()
th <- th + 1
}
toString(rep(1, 3))
toString(split(rep(1, 3)))
?split
split(toString(rep(1, 3)), f = ',')
th <- 0.01
for (i in seq(1000, iter, by = 1000)){
name <- paste('~/Barnsley/', toString(th), '.png', sep = '')
png(filename = name, width = 900, height = 566)
plot(x = df[1:i, 2], y = df[1:i, 1], plt = c(0, 10, -5, 5), cex = 0.1, asp = 1)
dev.off()
th <- th + 0.01
}
rm(list = ls())
if (!is.loaded('animation')){library('animation')}
iter = 40000
p = runif(iter)
coord = matrix(c(0, 0), ncol = 1)
df = rbind(data.frame(), t(coord))
dis = c(0.05, 0.81, 0.07)
for (i in 1:iter) {
if (p[i] <= dis[1]) {
m = matrix(c(0, 0, 0, 0.16), nrow = 2, ncol = 2)
const = matrix(c(0, 0), ncol = 1)
} else if (p[i] > dis[1] && p[i] <= dis[1] + dis[2]) {
m = matrix(c(0.85, -0.04, 0.04, 0.85), nrow = 2, ncol = 2)
const = matrix(c(0, 1.6), ncol = 1)
} else if (p[i] > dis[1] + dis[2] && p[i] <= sum(dis)) {
m = matrix(c(0.2, 0.23, -0.26, 0.22), nrow = 2, ncol = 2)
const = matrix(c(0, 1.6), ncol = 1)
} else {
m = matrix(c(-0.15, 0.26, 0.28, 0.24), nrow = 2, ncol = 2)
const = matrix(c(0, 0.44), ncol = 1)
}
coord = m %*% coord + const
df = rbind(df, t(coord))
}
th <- 0.01
for (i in seq(1000, iter, by = 1000)){
name <- paste('~/Barnsley/', toString(th), '.png', sep = '')
png(filename = name, width = 900, height = 566)
plot(x = df[1:i, 2], y = df[1:i, 1], plt = c(0, 10, -5, 5), cex = 0.1, asp = 1)
dev.off()
th <- th + 0.01
}
th <- 0.01
for (i in seq(1000, iter, by = 500)){
name <- paste('~/Barnsley/', toString(th), '.png', sep = '')
png(filename = name, width = 900, height = 566)
plot(x = df[1:i, 2], y = df[1:i, 1], plt = c(0, 10, -5, 5), cex = 0.1, asp = 1)
dev.off()
th <- th + 0.01
}
th <- 0.01
for (i in seq(1000, iter, by = 500)){
name <- paste('~/Barnsley/', toString(th), '.png', sep = '')
png(filename = name, width = 900, height = 566)
plot(x = df[1:i, 2], y = df[1:i, 1], plt = c(0, 10, -5, 5), cex = 0.1, asp = 1)
dev.off()
th <- th + 0.01
}
name <- paste('~/Barnsley/', toString(th), '.png', sep = '')
png(filename = name, width = 900, height = 566)
plot(x = df[1:i, 2], y = df[1:i, 1], plt = c(0, 10, -5, 5), cex = 0.1, asp = 1)
dev.off()
rm(list=ls())
library('slidify')
library('whisker')
setwd("~/Documents/R_scripts/Slidify")
author('The Basic of R')
slidify('index.Rmd')
